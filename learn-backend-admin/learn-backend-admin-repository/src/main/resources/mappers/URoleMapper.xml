<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gzs.learn.backend.admin.repository.URoleMapper">
    <resultMap id="BaseResultMap" type="com.gzs.learn.backend.admin.entity.URole">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="type" property="type" jdbcType="VARCHAR" />
    </resultMap>
    <sql id="Base_Column_List">
        id, name, type
    </sql>

    <sql id="where_all">
        <where>
            <if test="findContent != null and findContent !='' ">
                and (
                LOWER(name) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%") or
                LOWER(type) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")
                )
            </if>
        </where>
    </sql>
    <select id="findRoleByUserId" resultType="java.lang.String">
        select 
            r.type 
        from 
            u_role r
       	    join u_user_role ur on ur.rid = r.id
        where
            ur.uid = #{id,jdbcType=BIGINT}
    </select>
    <!-- 普通的分页查询 -->
    <select id="findAll" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List" />
        from 
            u_role
            <include refid="where_all" />
    </select>
    
    <select id="findCount" resultMap="BaseResultMap">
        select count(id) from u_role
        <include refid="where_all" />
    </select>

    <select id="selectRoleByUserId" resultType="com.gzs.learn.backend.admin.permission.bo.URoleBo">
        select ur.id,ur.name,ur.type,ifnull(uur.uid,0) marker from u_role
        ur
        left join(select * from u_user_role where uid=#{id,jdbcType=BIGINT}) uur on uur.rid = ur.id
    </select>

    <select id="findRoleAndPermission" resultType="com.gzs.learn.backend.admin.permission.bo.RolePermissionAllocationBo">
        select ur.id,ur.type,ur.name,group_concat(up.name) permissionNames,group_concat(up.id)permissionIds from
        u_role
        ur
        left join u_role_permission urp on urp.rid = ur.id
        left join u_permission up on up.id = urp.pid
        <where>
            <if test="findContent != null and findContent !='' ">
                and (
                LOWER(ur.name) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%") or
                LOWER(ur.type) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")
                )
            </if>
        </where>
        group by ur.id
    </select>

    <resultMap id="findNowAllPermission_resultMap" extends="BaseResultMap"
        type="com.gzs.learn.backend.admin.entity.URole">
        <collection property="permissions" javaType="com.gzs.learn.backend.admin.entity.UPermission">
            <id column="pid" property="id" jdbcType="BIGINT" />
            <result column="pname" property="name" jdbcType="VARCHAR" />
            <result column="url" property="url" jdbcType="VARCHAR" />
        </collection>
    </resultMap>
    
    <select id="findNowAllPermission" resultMap="findNowAllPermission_resultMap">
        select ur.id,ur.name,ur.type ,up.id pid,up.url,up.name pname
        from
        (select rid from u_user_role where uid = #{userId,jdbcType=BIGINT}) uur
        left join u_role ur on uur.rid = ur.id
        left join u_role_permission urp on urp.rid = ur.id
        left join u_permission up on up.id = urp.pid
    </select>


    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List" />
        from u_role
        where id = #{id,jdbcType=BIGINT}
    </select>
    
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from u_role
        where id = #{id,jdbcType=BIGINT}
    </delete>
    
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.gzs.learn.backend.admin.entity.URole">
        insert into u_role (id, name, type
        )
        values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}
        )
    </insert>
    
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id"
        parameterType="com.gzs.learn.backend.admin.entity.URole">
        insert into u_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="type != null">
                type,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    
    <update id="updateByPrimaryKeySelective" parameterType="com.gzs.learn.backend.admin.entity.URole">
        update u_role
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    
    <update id="updateByPrimaryKey" parameterType="com.gzs.learn.backend.admin.entity.URole">
        update u_role
        set name = #{name,jdbcType=VARCHAR},
        type =
        #{type,jdbcType=VARCHAR}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>
